image: golang:latest

variables:
  IMAGE_NAME: maiyzaza/demo-app
  IMAGE_TAG: latest

stages:
#  - database
  - create_env_file
  - deleteImage
  - buildImage
  - deploy

# database:
#  stage: database
#  script:
#    -  |
#        cat << EOF > .env
#              REMOTE_DB_URL="$DB_CONNECTION"
#        EOF
#        ls -la
#        cat .env
create_env_file:
  stage: create_env_file
  script:
    - echo "REMOTE_DB_URL=$DB_CONNECTION" >> .env
    - cat .env

delete_image:
  stage: deleteImage
  image: docker:23.0.6
  services:
    - docker:23.0.6-dind
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
    - docker ps
    - docker image ls 
    - docker ps -aq | xargs -I {} sh -c 'docker stop {} && docker rm {}'
  script:
    - docker ps -q | xargs -I {} docker stop {} && docker images -q | xargs -I {} docker rmi -f {}
    - docker ps
    - docker image ls 

build_image:
  stage: buildImage
  image: docker:23.0.6
  services:
    - docker:23.0.6-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
    - docker ps
    - docker image ls 
    - export DATABASE_URL=$DATABASE_URL
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG . 
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker ps
    - docker image ls 

deploy:
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY root@146.190.98.250 "
        docker login -u $REGISTRY_USER -p $REGISTRY_PASS &&
        docker ps -aq | xargs -I {} docker stop {} | xargs -I {} docker rm {} &&
        docker run -d -p 8080:8080 $IMAGE_NAME:$IMAGE_TAG"

